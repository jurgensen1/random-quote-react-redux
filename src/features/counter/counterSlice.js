import { createSlice } from '@reduxjs/toolkit';
import '../../_variables.scss';

const initialState = {
    value: Math.floor(Math.random() * 1642),
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
function randomColor() {
    let red = Math.floor(Math.random() * 150);
    let green = Math.floor(Math.random() * 150);
    let blue = Math.floor(Math.random() * 150);
    return "rgb(" + red + "," + blue + "," + green + ")";
}

export const counterSlice = createSlice({
    name: 'counter',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value += 1;
            document.documentElement.style.setProperty(
                "--background-color",
                randomColor()
            );
        },
        decrement: (state) => {
            state.value -= 1;
            document.documentElement.style.setProperty(
                "--background-color",
                randomColor()
            );
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        getQuoteByNumber: (state, action) => {
            state.value = action.payload - 1;
            document.documentElement.style.setProperty(
                "--background-color",
                randomColor()
            );
        },
        randomQuote: (state) => {
            state.value = Math.floor(Math.random() * 1642);
            document.documentElement.style.setProperty(
                "--background-color",
                randomColor()
            );
        },
        handleChange: (state, action) => {
            state.value = action.payload - 1;
            document.documentElement.style.setProperty(
                "--background-color",
                randomColor()
            );
        }
    }
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

});

export const { increment, decrement, getQuoteByNumber, randomQuote, handleChange } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd = (amount) => (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
        dispatch(getQuoteByNumber(amount));
    }
};

export default counterSlice.reducer;
